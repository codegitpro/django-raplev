(function() {
  "use strict";

  /**
   * Expandable elements that triggered by buttons with '.js-collapse-trigger'
   * class and the data-target with their selector.
   * @version 4.0.2
   * @author Daur Gamisonia <daurgam@gmail.com>
   */
  window.Collapse = function Collapse() {};

  /**
   * Listen button.
   * @public
   */
  Collapse.prototype.listen = function() {
    document.addEventListener( "click", this._initialize.bind(this) );
  };

  /**
   * Get target elements from the event.
   * @protected
   */
  Collapse.prototype._initialize = function( event ) {
    var eventTarget = event.target;
    var targets;
    var trigger;

    while( true ) {

      if ( !eventTarget ) {
        return;
      }

      if ( !eventTarget.classList.contains("js-collapse-trigger") ) {

        eventTarget = eventTarget.parentElement;

        continue;
      }

      event.preventDefault();

      trigger = eventTarget;

      targets = document.querySelectorAll(trigger.getAttribute("data-target"));

      this._handle( trigger, targets );

      return;
    }
  };

  /**
   * Handle transition.
   * @protected
   * @param {HTMLElement} trigger - Button element.
   * @param {HTMLElement[]} targets - Target elements.
   */
  Collapse.prototype._handle = function( trigger, targets ) {
    var duration = this._getDuration( targets[0] );
    var target;

    if ( !trigger.classList.contains("pending") ) {

      trigger.classList.add("pending");

      setTimeout(function() {

        trigger.classList.remove("pending");

      }, duration );

    } else {

      return;
    }

    for ( var i = 0; i < targets.length; i++ ) {
      target = targets[i];

      if ( !trigger.classList.contains("is-active") ) {

        this._slideDown( target );

      } else {

        this._slideUp( target );
      }
    }

    trigger.classList.toggle("is-active");
  };

  /**
   * Expand the element.
   * @protected
   */
  Collapse.prototype._slideDown = function( target ) {
    var style = target.style;
    var paddingTop = this._getStyle( target, "padding-top" );
    var paddingBottom = this._getStyle( target, "padding-bottom" );
    var duration = this._getDuration( target );
    var height;

    style.overflow = "hidden";

    style.display = "block";

    height = target.offsetHeight;

    style.transition = "none";

    style.height = "0";

    style.paddingTop = "0";

    style.paddingBottom = "0";

    setTimeout(function() {

      style.transition = "";

      style.height = height + "px";

      style.paddingTop = paddingTop + "px";

      style.paddingBottom = paddingBottom + "px";

      setTimeout(function() {

        style.overflow = "";

      }, duration );

    }, 10 );
  };

  /**
   * Roll up.
   * @protected
   */
  Collapse.prototype._slideUp = function( target ) {
    var style = target.style;
    var duration = this._getDuration( target );

    style.overflow = "hidden";

    style.height = "0";

    style.paddingTop = "0";

    style.paddingBottom = "0";

    setTimeout(function() {

      target.removeAttribute("style");

    }, duration );
  };

  /**
   * Get transition duration.
   * @protected
   */
  Collapse.prototype._getDuration = function( element ) {
    var duration = parseFloat( getComputedStyle( element ).transitionDuration );

    return duration * 1000;
  };

  /**
   * Get style value.
   * @protected
   */
  Collapse.prototype._getStyle = function( element, property ) {
    var value = getComputedStyle( element )[property];

    return parseFloat( value );
  };
})();

var collapse = new Collapse();

collapse.listen();

/**
 * Dropdown window.
 * @class
 * @param {Object} options - Options object.
 * @param {string} options.button - Button selector.
 * @param {string} options.container - Container selector.
 * @param {boolean} [options.multiple=false] - Support of simultaneous operation of multiple objects.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Dropdown( options ) {
  "use strict";

  var btn = document.querySelector( options.button );
  var dropdown = document.querySelector( options.dropdown );
  var multiple = options.multiple || false;

  // Statuses
  Dropdown.isActive = false;

  Dropdown.isEnabled = true;

  this.open = function() {
    /*
     * Disable previous window from closing.
     * Created specially for the Forgot password window.
     */
    if ( multiple ) {
      Dropdown.isEnabled = false;
    }

    if ( dropdown.classList.contains("is-active") && Dropdown.isEnabled ) {

      this.close();

      return;
    }

    if ( !multiple && Dropdown.isActive ) {
      return;
    }

    Dropdown.isActive = true;

    dropdown.style.display = "block";

    setTimeout(function() {

      dropdown.classList.add("is-active");

      btn.classList.add("is-active");

    }, 30);
  };

  this.close = function() {

    if ( !multiple ) {
      Dropdown.isActive = false;
    }

    Dropdown.isEnabled = true;

    dropdown.classList.remove("is-active");

    setTimeout(function() {

      dropdown.style.display = "";

      btn.classList.remove("is-active");

    }.bind( this ), this._getDuration( dropdown ) );
  };

  this._getDuration = function( elem ) {
    var duration = parseFloat( getComputedStyle( elem ).transitionDuration );

    // Get ms from sec
    return duration * 1000;
  };
}

/**
 * Object with dropdown window.
 * Each of them has two methods: open and close.
 * So you can call: login.open(), login.close() etc.
 */
var userMenu = new Dropdown({
  button: ".js-user-menu-trigger",
  dropdown: ".js-user-menu-target"
});

var login = new Dropdown({
  button: ".js-login-trigger",
  dropdown: ".js-login-target"
});

var register = new Dropdown({
  button: ".js-register-trigger",
  dropdown: ".js-register-target"
});

var forgotPW = new Dropdown({
  button: ".js-forgot-pwd-trigger",
  dropdown: ".js-forgot-pwd-target",
  multiple: true
});

var support = new Dropdown({
  button: ".js-support-trigger",
  dropdown: ".js-support-target"
});

/**
 * Open the login window from the register.
 * @param {number} [duration=300] - Time in MS when the login window should be opened.
 */
function switchToLogin( duration ) {

  duration = duration || 300;

  register.close();

  setTimeout(function() {
    login.open();
  }, duration );
}

/**
 * Open the register window from the login.
 * @param {number} [duration=300] - Time in MS when the register window should be opened.
 */
function switchToRegister( duration ) {

  duration = duration || 300;

  login.close();

  setTimeout(function() {
    register.open();
  }, duration );
}
/**
 * Scroll page to top.
 * @param {string} options.button - Button selector.
 * @param {number} [options.step=100] - Animation speed in pixels.
 * @param {number} [options.threshold] - Offset from top of the page that show up the button.
 * @version 3.0.3
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function ScrollButton( options ) {
  "use strict";

  var button = document.querySelector( options.button );

  button.onclick = scrollUp;

  function scrollUp() {
    var step = -options.step || -100;
    var timeOut;

    if (document.documentElement.scrollTop !=0 || document.body.scrollTop !=0) {

      window.scrollBy( 0, step );

      timeOut = setTimeout(function() {

        scrollUp();

      }, 10 );

    } else {
      clearTimeout( timeOut );
    }
  }

  if ( options.threshold ) {

    window.addEventListener("scroll", function() {
      var threshold = options.threshold;

      if ( pageYOffset > threshold ) {
        button.classList.add("is-active");
      } else {
        button.classList.remove("is-active");
      }
    });
  }

 /**
  * Move scroll to top.
  * @public
  */
  this.scrollUp = scrollUp;
}

var scrollButton = new ScrollButton({
  button: "[data-toggle='scrollBtn']"
});

  "use strict";

  /**
   * Expandable navigation menu that turn off or on depending on the viewport width.
   * @augment Collapse
   * @param {string} options.trigger - Button selector.
   * @param {string} options.target - Expandable element selector. Multiple elements are supported.
   * @param {number} options.maxWidth - Threshold in pixels when the menu should be reset.
   * @version 3.0.0
   * @author Daur Gamisonia <daurgam@gmail.com>
   */
  function MobileMenu( options ) {
    this._trigger = document.querySelector( options.trigger );
    this._targets = document.querySelectorAll( options.target );
    this._maxWidth = options.maxWidth;
  }

  MobileMenu.prototype = Object.create( Collapse.prototype );

  MobileMenu.prototype.constructor = MobileMenu;

  MobileMenu.prototype._reset = function() {
    var media = window.matchMedia("(max-width:" + this._maxWidth + "px)");
    var trigger = this._trigger;
    var targets = this._targets;

    if ( media.matches && this._isThrottled ) {
      this._isThrottled = false;
    }

    if ( !media.matches && !this._isThrottled ) {

      trigger.classList.remove("is-active");

      for ( var i = 0; i < targets.length; i++ ) {
        targets[i].removeAttribute("style");
      }

      this._isThrottled = true;
    }
  };

  MobileMenu.prototype.listen = function() {
    var trigger = this._trigger;
    var targets = this._targets;

    trigger.onclick = function() {
      this._handle( trigger, targets );
    }.bind(this);

    window.addEventListener( "resize", this._reset.bind(this) );
  };

  var menu = new MobileMenu({
    trigger: ".js-mobile-menu-trigger",
    target: ".js-mobile-menu-target",
    maxWidth: 1340
  });

  menu.listen();


/**
 * Handling tab list.
 * @param {Object} options - Options object.
 * @param {string} options.buttons - Button list selector
 * @param {string} options.tabs - Tab list selector
 */
function Tablist( options ) {
  "use strict";

  var buttons = document.querySelector( options.buttons );
  var tabs = document.querySelector( options.tabs );

  function handle( event ) {
    var target = event.target;

    while( true ) {

      if ( target == document.body ) {
        break;
      }

      if ( target.parentElement != buttons ) {
        target = target.parentElement;
        continue;
      }

      clearStates();

      switchTab( getIndex( target ) );

      break;
    }
  }

  function switchTab( index ) {

    buttons.children[index].classList.add("is-active");

    tabs.children[index].style.display = "block";
  }

  function clearStates() {
    for ( var i = 0; i < tabs.children.length; i++ ) {

      buttons.children[i].classList.remove("is-active");

      tabs.children[i].style.display = "none";
    }
  }

  function getIndex( elem ) {
    var parent = elem.parentElement;
    var child = parent.firstElementChild;
    var index = 0;

    while ( true ) {

      if ( child == elem || child.nextElementSibling == null ) {
        break;
      }

      child = child.nextElementSibling;

      index++;
    }

    return index;
  }

  (function listen() {
    document.body.addEventListener( "click", handle );
  })();
}

var tablist = new Tablist({
  buttons: ".js-tablist-triggers",
  tabs: ".js-tablist-tabs"
});
/**
 * Generate articles from server-side data.
 */
function Archive() {
  "use strict";

  var container = document.querySelector(".js-articles-container");
  var template = document.querySelector(".js-article-template").children[0];
  var loadButton = document.querySelector(".js-load-articles-button");
  var isDesktop = window.matchMedia("(min-width: 1340px)").matches;
  var pageIndex = 1;
  var columnIndex = 0;
  var wrapper;

  /**
   * @public
   */
  this.loadArticles = function() {
    var url;

    insertWrappers();

    if ( pageIndex == 1 ) {
      url = window.location.href + "/data";
    } else {
      url = window.location.href + "/data?page=" + pageIndex;
    }

    // var url = "articles.html";

    $.get( url, function( data ) {
      // var content = $(data).filter("pre");
      // var string = content.text();
      // var parsed = JSON.parse( string );
      // var articles = parsed.posts;

      var articles = data.posts;
      var sum = articles.length;
      var articleData;
      var articleElement;

      if ( data.page == data.total_pages ) {
        loadButton.style.display = "none";
      }

      for ( var i = 0; i < sum; i++ ) {

        articleData = articles[i];

        articleElement = template.cloneNode( true );

        fillArticle( articleElement, articleData );

        insertArticle( articleElement );
      }

      pageIndex++;
    });
  };

  /**
   * Insert article wrapper and columns depending on viewport size.
   * Mobile mode has 1 column, and desktop mode has 3.
   * @private
   */
  function insertWrappers() {
    var columnSum = (isDesktop) ? 3 : 1;
    var column;

    wrapper = document.createElement("div");

    wrapper.className = "archive__wrapper";

    container.appendChild( wrapper );

    for (var i = 0; i < columnSum; i++ ) {

      column = document.createElement("div");

      column.className = "archive__column";

      wrapper.appendChild( column );
    }
  }

  /**
   * Fill article with values.
   * @private
   */
  function fillArticle( articleElement, articleData ) {
    var imageElement = articleElement.querySelector(".archive__img");
    var titleElement = articleElement.querySelector(".archive__link");
    var dataElement = articleElement.querySelector(".archive__pub-data");
    var textElement = articleElement.querySelector(".archive__excerpt");
    var date = new Date( articleData.creation_date );
    var day = date.getDate();
    var month = date.toLocaleString("en-US", { month: "long" });
    var weekday = date.toLocaleString("en-US", { weekday: "long" });
    var year = date.getFullYear();
    var userId = articleData.user_id;
    var pubData;

    // Set the image.
    if ( articleData.show_image ) {
      imageElement.setAttribute( "src", articleData.image );
    }

    // Set the title.
    titleElement.textContent = articleData.title;

    // Set the publication data.
    pubData = day + "th " + month + ", " + weekday + ", " + year;

    pubData += " - Added by " + userId;

    dataElement.textContent = pubData;

    // Set the 'datetime' value.
    dataElement.setAttribute("datetime", articleData.creation_date );

    // Set the content.
    textElement.textContent = articleData.contents;
  }

  /**
   * Insert the article element in the right place.
   * @private
   */
  function insertArticle( articleElement ) {

    if ( isDesktop ) {

      if ( columnIndex == 3 ) {
        columnIndex = 0;
      }

      wrapper.children[columnIndex].appendChild( articleElement );

      columnIndex++;

    } else {
      wrapper.children[0].appendChild( articleElement );
    }
  }
}
/**
 * Popup window.
 * @param {string} selector - Container selector.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Popup( selector ) {
  "use strict";

  var popup = document.querySelector( selector );

  if ( !popup ) {
    return;
  }

  var container = popup.querySelector(".popup__container");
  var duration = getDuration( container );

  /**
   * Open popup.
   * @public
   */
  this.open = function() {

    popup.style.display = "block";

    setTimeout(function() {
      popup.classList.add("is-active");
    }, 20 );
  };

  /**
   * Close popup.
   * @public
   */
  this.close = function() {

    popup.classList.remove("is-active");

    setTimeout(function() {

      popup.style.display = "";

    }.bind(this), duration );
  };

  /**
   * Get transition duration.
   * @private
   */
  function getDuration( element ) {
    var duration = parseFloat( getComputedStyle( element ).transitionDuration );

    // Get ms from sec.
    return duration * 1000;
  }
}

/**
 * Each objects has 2 methods: open and close.
 * So you can call it by followLink.open() or followLink.close().
 */
var confirmation = new Popup(".js-confirmation-toggle");
var followLink = new Popup(".js-follow-link-toggle");
var pwRecover = new Popup(".js-pw-recover-toggle");
var pwRecover_2 = new Popup(".js-pw-recover-2-toggle");
var emailActivation = new Popup(".js-email-activation-toggle");
var withdrawFunds = new Popup(".js-withdraw-funds-toggle");
/**
 * Disable trade price field on the 'trade' page when the 'Use market price'
 * radio button is checked.
 */
function handleMarketPrice() {
  "use strict";

  var usePriceTrigger = document.querySelector("[name='useMarketPrice']");
  var trailPriceTrigger = document.querySelector("[name='trailMarketPrice']");
  var fieldWrapper = document.querySelector(".js-trade-price-field");
  var fieldInput = fieldWrapper.children[0];
  var placeholder;

  if ( !fieldInput.getAttribute("data-placeholder") ) {
    fieldInput.setAttribute( "data-placeholder", fieldInput.placeholder );
  } else {
    placeholder = fieldInput.getAttribute("data-placeholder");
  }

  if ( usePriceTrigger.checked ) {

    fieldWrapper.classList.add("is-disabled");

    fieldInput.disabled = true;

    fieldInput.placeholder = "Use market price for Asking Price. Value 3885 USD";

    trailPriceTrigger.disabled = true;

  } else if ( !usePriceTrigger.checked )  {

    fieldWrapper.classList.remove("is-disabled");

    fieldInput.disabled = false;

    trailPriceTrigger.disabled = false;

    fieldInput.placeholder = placeholder;
  }

  if ( trailPriceTrigger.checked ) {

    usePriceTrigger.disabled = true;

    fieldInput.placeholder = "Initial Asking Price? Price will follow market movement";

  } else if ( !trailPriceTrigger.checked ) {

    usePriceTrigger.disabled = false;
  }
}
/**
 * Handling user selection in messenger.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Userlist() {
  "use strict";

  var container = document.querySelector("[data-toggle='userlist']");
  var previousActive;

  this._handle = function( event ) {
    var target = event.target;

    while( true ) {
      if ( target == container ) {
        break;
      }

      if ( target.tagName != "LI" ) {
        target = target.parentElement;
        continue;
      }

      if ( target.classList.contains("is-active") ) {
        break;
      }

      if ( previousActive ) {
        previousActive.classList.remove("is-active");
      }

      target.classList.add("is-active");

      previousActive = target;

      break;
    }

  }.bind(this);

  // Prevent text selection
  container.onmousedown = function( event ) {
    event.preventDefault();
  };

  this.listen = function() {
    container.addEventListener( "click", this._handle );
  };
}
/**
 * Handling user accessibility.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function UserStatus() {
  "use strict";

  var trigger = document.querySelector(".js-status-trigger");
  var dropdown = document.querySelector(".js-status-target");
  var ONLINE_CLASS = "is-online";
  var AWAY_CLASS = "is-away";
  var OFFLINE_CLASS = "is-offline";

  this._handle = function( event ) {
    var target = event.target;

    while( true ) {

      if ( target == document.body ) {
        this._hide();
        break;
      }

      if ( target != trigger ) {
        target = target.parentElement;
        continue;
      }

      if ( dropdown.classList.contains("is-active") ) {
        this._hide();
        break;
      }

      this._show();

      break;
    }

  }.bind(this);

  this._show = function() {

    dropdown.style.display = "block";

    setTimeout(function() {
      dropdown.classList.add("is-active");
    }, 30 );
  };

  this._hide = function() {

    dropdown.classList.remove("is-active");

    setTimeout(function() {

      dropdown.style.cssText = "";

    }, this._getDuration( dropdown ) );
  };

  this.setOnline = function() {

    this._clearState();

    trigger.classList.add( ONLINE_CLASS );
  };

  this.setAway = function() {

    this._clearState();

    trigger.classList.add( AWAY_CLASS );
  };

  this.setOffline = function() {

    this._clearState();

    trigger.classList.add( OFFLINE_CLASS );
  };

  this._clearState = function() {
    var states = [ ONLINE_CLASS, AWAY_CLASS, OFFLINE_CLASS ];

    for ( var i = 0; i <= states.length; i++ ) {
      trigger.classList.remove( states[i] );
    }
  };

  this._getDuration = function( elem ) {
    var duration = parseFloat( getComputedStyle( elem ).transitionDuration );

    // Get ms from sec
    return duration * 1000;
  };

  // Prevent text selection
  dropdown.onmousedown = function( event ) {
    event.preventDefault();
  };

  this.listen = function() {
  	document.body.addEventListener( "click", this._handle );
  };
 }
/**
 * Auto-Expanding Textarea inspired by https://codepen.io/vsync/pen/frudD
 * @param {HTMLElement} [textarea] - Textarea element.
 * @param {number} [maxRows] - Maximum number of rows.
 * @version 1.0.4
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function handleTextarea( textarea, maxRows ) {
  "use strict";

  textarea = textarea || document.querySelector(".js-textarea");

  maxRows = maxRows || Infinity;

  if ( !textarea ) {
    console.log("Element not found.");
    return;
  }

  var minRows = textarea.rows || 1;
  var fontSize = parseFloat( getComputedStyle( textarea ).fontSize );
  var baseScrollHeight;
  var isExecuted;
  var rows;

  textarea.onfocus = function() {

    if ( isExecuted ) {
      return;
    }

    baseScrollHeight = this.scrollHeight;

    isExecuted = true;
  };

  textarea.oninput = function() {

    this.rows = minRows;

    rows = Math.ceil((this.scrollHeight - baseScrollHeight) / (fontSize*1.15));

    if ( minRows + rows < maxRows ) {
      this.rows = minRows + rows;
    } else {
      this.rows = maxRows;
    }
  };
}

handleTextarea(
  document.querySelector(".js-auto-expand-toggle"),
  10
);
/**
 * Sticks message input block to bottom of mobile device screen.
 * @param {Object} options - Selectors
 * @param {string} options.element - Textarea block with buttons
 * @param {string} options.container - Outer container
 * @param {number} [desktopWidth] - Threshold in pixels when the script should be turned off.
 */
function fixTextarea( options ) {
  "use strict";

  var element = document.querySelector( options.element );
  var container = document.querySelector( options.container );
  var desktopWidth = options.desktopWidth;
  var isMobile;
  var isDesktop;

  function handle() {
    var height = element.offsetHeight;

    if ( isOutOfViewport( container ) ) {

      element.classList.add("is-fixed");

      container.style.height = height + "px";

    } else {

      resetState();
    }

    return;
  }

  function resetState() {

    element.classList.remove("is-fixed");

    container.style.height = "";
  }

  function isOutOfViewport( container ) {
    var viewportBottom = document.documentElement.clientHeight + pageYOffset;
    var containerTop = container.getBoundingClientRect().top + pageYOffset;

    if ( viewportBottom < containerTop ) {
      return true;

    } else {
      return false;
    }
  }

  function toggle() {
    var pageWidth = document.documentElement.clientWidth;

    if ( pageWidth < desktopWidth && !isMobile ) {

      window.addEventListener( "scroll", handle );

      handle();

      isMobile = true;

      isDesktop = false;
    }

    if ( pageWidth >= desktopWidth && !isDesktop )  {

      window.removeEventListener( "scroll", handle );

      resetState();

      isMobile = false;

      isDesktop = true;
    }
  }

  (function listen() {

    window.addEventListener( "DOMContentLoaded", toggle );

    window.addEventListener( "resize", toggle );
  })();
}
/**
 * Copy data from input field.
 * @author Daur Gamisonia <daurgam@gmail.com>
 */
function Copy() {
  "use strict";

  var btn = document.querySelector(".js-copy-trigger");
  var output = document.querySelector(".js-copy-target");
  var messageBox = document.querySelector(".js-copy-message");

  this._copy = function() {

    output.focus();

    output.select();

    document.execCommand("Copy");
  };

  this._showMessage = function() {
    messageBox.classList.add("is-active");
  };

  this.listen = function() {

    btn.addEventListener("click", function() {

      this._copy();

      this._showMessage();

    }.bind(this) );
  };
}
/**
 * Show and hide results headline.
 */
function ResultsBar() {
  "use strict";

  var bar = document.querySelector(".js-results-bar");

  /**
   * Show the bar.
   * @public
   */
  this.show = function() {

    bar.hidden = false;

    setTimeout(function() {

      bar.classList.add("is-active");

    }, 20 );
  };

  /**
   * Hide the bar.
   * @public
   */
  this.hide = function() {

    bar.classList.remove("is-active");

    setTimeout(function() {

      bar.hidden = true;

    }, getDuration( bar ) );
  };

  /**
   * Get the animation duration time.
   * @private
   */
  function getDuration( elem ) {
    var duration = parseFloat( getComputedStyle( elem ).transitionDuration );

    // Get ms from sec
    return duration * 1000;
  }
}

var resultsBar = new ResultsBar();
/**
 * Remove saved card.
 */
function removeCard() {
  "use strict";

  var cards = document.getElementsByClassName("js-card-toggle");
  var container = cards[0].parentElement;
  var targetCard = event.target.parentElement.parentElement;

  container.removeChild( targetCard );

  if ( !cards.length ) {
    container.innerHTML = "";
  }

  return;
}